plugins {
    id "idea"
    id 'groovy'
    id 'java-gradle-plugin'
    id 'maven-publish'
}

repositories {
    mavenCentral()
    gradlePluginPortal()
}

dependencies {
    implementation 'com.bmuschko:gradle-docker-plugin:7.4.0'

    testImplementation 'org.spockframework:spock-core:2.0-groovy-3.0'
}

String pluginDescription = "Gradle plugin for managing Docker containers, specifically in the context of the local and CI build/test lifecycle.  " +
        "This plugin provides a handy DSL for the excellent https://github.com/bmuschko/gradle-docker-plugin."

gradlePlugin {
    plugins {
        dockerDsl {
            id = 'net.twilightcity.docker-dsl'
            displayName = "Docker DSL"
            description = pluginDescription
            implementationClass = 'org.betterdevxp.dockerdsl.DockerDslPlugin'
        }
    }
}

publishing {
    repositories {
        maven {
            url = "http://nexus.twilightcity.net:8081/repository/public"
            allowInsecureProtocol = true
            credentials {
                username = "ci"
                password = findProperty('nexus.password')
            }
        }
    }
}

sourceSets {
    functionalTest {
    }
}

gradlePlugin.testSourceSets(sourceSets.functionalTest)
configurations.functionalTestImplementation.extendsFrom(configurations.testImplementation)

// Add a task to run the functional tests
tasks.register('functionalTest', Test) {
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
}

tasks.named('check') {
    // Run the functional tests as part of `check`
    dependsOn(tasks.functionalTest)
}

tasks.withType(Test).configureEach {
    useJUnitPlatform()
}
